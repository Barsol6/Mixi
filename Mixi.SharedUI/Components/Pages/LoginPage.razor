@using System.Net
@using Mixi.Shared.Models.Account
@using Mixi.Shared.Models.UI
@using Mixi.SharedUI.Components.Layout
@using Mixi.SharedUI.Components.UI
@using Mixi.SharedUI.Components.Popups


@layout LoginLayout
@inject HttpClient Http
@inject Account Account
@inject SignUpPopup SignUpPop

@implements IDisposable

<div class="@(SignUpPop.IsLogged ? "hidden" : "container")">
    
    <div class="@(SignUpPop.MouseStatus ? "loginContainerAfter" : "loginContainerBefore")" onmouseenter="@MouseEnter" onmouseleave="@MouseLeave">
    <div class="title">
       MIXI
    </div>
    <div class="loginBox items-center">

        <div class="login">
            <div class="data-box">
                <input type="text" @bind="Account.Username" onkeyup="@Enter" required="required"/>
                <label> LOGIN </label>
            </div>
            <br/>
            <div class="data-box">
                <input class="bg-[]" type="password" @bind="Account.Password" onkeyup="@Enter" required="required"/>
                <label> PASSWORD </label>
            </div>
            <br/>
            <div class="loginButton" @onclick="HandleUserLogin">
                <div class="logButton">
                    <div class="logButton-content">
                        LOG IN
                    </div>
                </div>
            </div>
            <div class="loginButton"  @onclick="ShowSignUpPop">
                <div class="logButton" >
                    <div class="logButton-content">
                        SIGN UP
                    </div>
                </div>
            </div>
         
        </div>
        <PopupContainer @ref="_popup"></PopupContainer>
    </div>
   
    </div>

</div> 

@code {
    private PopupContainer _popup = null!;

    protected override void OnInitialized()
    {
        this.SignUpPop.MouseStatusChange += () => InvokeAsync(StateHasChanged);
        this.SignUpPop.IsLoggedChange += () => InvokeAsync(StateHasChanged);
        this.SignUpPop.IsVisibleChange += () => InvokeAsync(StateHasChanged);
        this.SignUpPop.IsVisibleChange += () =>
        {
            Account.Password = String.Empty;
            Account.Username = String.Empty;
            Account.PasswordRepeat = String.Empty;
        };
        base.OnInitializedAsync();
    }


    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter" )
        {
            await HandleUserLogin();
        }
    }

    private async Task HandleUserLogin()
    {
        if (Account.Username != String.Empty && Account.Password != String.Empty)
        {
            var response = await Http.PostAsJsonAsync("api/user/login", Account);
            
            if (response.IsSuccessStatusCode)
            {
                SignUpPop.IsLogged = true;
            }
            else if(response.StatusCode == HttpStatusCode.NotFound)
            {
                ShowSignUpPop();
            }
            else if(response.StatusCode == HttpStatusCode.Unauthorized)
            {
                SignUpPop.IsLogged = false;
            }
            
        }
    }

    private async void ShowSignUpPop()
    {
        Account.Password = String.Empty;
        Account.Username = String.Empty;
        Account.PasswordRepeat = String.Empty;
        Account.UserType = string.Empty; 
        _popup.ShowComponent<Register>();
    }
    
    public void Dispose()
    {
        this.SignUpPop.IsVisibleChange -= StateHasChanged;
        this.SignUpPop.IsLoggedChange -= StateHasChanged;
        this.SignUpPop.MouseStatusChange -= StateHasChanged;
    }

    public void MouseEnter()
    {
        SignUpPop.MouseStatus = true;
    }

    public void MouseLeave()
    {
        SignUpPop.MouseStatus = false;
    }

}