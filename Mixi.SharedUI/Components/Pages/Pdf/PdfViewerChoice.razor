
@using Mixi.Shared.Models.UI
@using Mixi.SharedUI.Components.Pages.Pdf
@using Mixi.SharedUI.Components.UI
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject PdfPopup PdfPopup
@inject NavigationManager NavigationManager

@page "/pdf/viewer_choice/{UserName}"

@implements IDisposable

<div class="pdfChoicePanel">
   @if (_isLoading)
   {
       <p>Ładowanie dokumentów...</p>
   }
   else
   {
       <div class="data-box">
           <div class="logButton" @onclick="UploadNewPdf">
               <span class="logButton-content">
                   DODAJ NOWY PDF
               </span>
           </div>
       </div>
       
       @if (_documents != null && _documents.Any() && _documents[0].Id!=0)
       {
           <div>
               <h4>Your character sheets:</h4>
               @foreach (var document in _documents)
               {
                   <div class="data-box">
                       <div class="logButton" >
                           <span class="logButton-content" @onclick="() => ViewDocument(document.Id)">
                               @document.Name
                           </span>
                           <span class="logButton-content" @onclick="() => DeletePdf(document.Id)">
                               DELETE
                           </span>
                       </div>
                      
                   </div>
               }
           </div>
       }
       else
       {
           <p>You have no character sheets yet.</p>
       }
       <div class="data-box">
           <div class="logButton">
               <div class="closeButton-content " @onclick="() => HidePopup()">
                   CLOSE
               </div>
           </div>
       </div>
   }
</div>

<PdfPopupContainer @ref="_popup"> </PdfPopupContainer>

@code {
    [Parameter]
    public string UserName { get; set; }
    
    private class PdfListItemDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
    
    private PdfPopupContainer? _popup;
    private List<PdfListItemDto>? _documents;
    private bool _isLoading = true;
    

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();  
    }
    

    private async void OnIsVisibleChange()
    {
        await InvokeAsync(StateHasChanged);
        
        if (!PdfPopup.IsVisible)
        {
            await InvokeAsync(LoadDocuments);
        }
    }
    
    private async Task LoadDocuments()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();
            _documents = await Http.GetFromJsonAsync<List<PdfListItemDto>>($"api/Pdf/{UserName}/getlist");
        }
        catch (Exception e)
        {
            Console.Error.WriteLine($"Error: {e.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ViewDocument(int id)
    {
        PdfPopup.PdfName = id;
        PdfPopup.IsVisible = true;
        _popup?.ShowComponent<PdfViewer>();
    }

    private void UploadNewPdf()
    {
        NavigationManager.NavigateTo($"/pdf/upload/{UserName}");
    }
    

    private async void DeletePdf(int id)
    {

        if (!await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this character sheet? This cannot be undone."))
        {
            return;
        }
        _isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.DeleteAsync($"api/Pdf/{id}/delete");

            if (response.IsSuccessStatusCode)
            {
                await InvokeAsync(LoadDocuments);
            }
            else
            {
                Console.Error.WriteLine($"Failed to delete document with ID: {id}");
            }
        }
        catch (Exception e)
        {
            Console.Error.WriteLine($"Error deleting document: {id}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        this.PdfPopup.IsVisibleChange -= OnIsVisibleChange;
    }
    
    private void HidePopup()
    {
        NavigationManager.NavigateTo($"/menu/{UserName}");
    }

}
