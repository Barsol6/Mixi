@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Logging
@using Mixi.Api.Modules.Enums
@using Mixi.Api.Modules.UI
@using Mixi.SharedUI.Components.Layout
@using Mixi.SharedUI.Components.Popups
@using Mixi.SharedUI.Components.UI
@rendermode InteractiveServer

@layout MenuLayout

@inject SignUpPopup SignUp
@inject NameGeneratorPopup NameGenPop
@inject ProtectedSessionStorage Storage

@implements IDisposable


<div class="@(SignUp.IsLogged ? "container" : "hidden")">
        <div class="data-box">
            <div class="logButton">
                <div class="logButton-content" @onclick="() => ShowPopup(MenuChoice.NameGenerator)">
                    NAME GENERATOR
                </div>
            </div>
        </div>  
        <div class="data-box">
            <div class="logButton">
                <div class="logButton-content" @onclick="() => ShowPopup(MenuChoice.PdfViewer)">
                    INTERACTIVE CHARACTER CARD
                </div>
            </div>
        </div>
        <div class="data-box">
            <div class="logButton">
                <div class="closeButton-content" @onclick="LogOut">
                    LOG OUT
                </div>
            </div>
        </div>
    <MenuPopupContainer @ref="_popup"></MenuPopupContainer>
</div>

@code {
    private MenuPopupContainer _popup = null!;

    private ILogger _logger = null!;
    


    protected override void OnInitialized()
    {
        this.SignUp.IsLoggedChange += () => InvokeAsync(StateHasChanged);
    }

    private Task ShowPopup(MenuChoice menuChoice)
    {
        switch (menuChoice)
        {
            case MenuChoice.NameGenerator:
                _popup.ShowComponent<NameGenerator>();
                break;
            case MenuChoice.PdfViewer:
                _popup.ShowComponent<PdfViewerChoice>();
                break;
            default:
                (_logger ?? throw new InvalidOperationException()).LogInformation("Menu choice error");
                break; 
        }

        return Task.CompletedTask;
    }
    
    public void Dispose()
    {
        this.SignUp.IsLoggedChange -= StateHasChanged;
    }

    private async Task LogOut()
    {
        NameGenPop.GeneratedName = String.Empty;
        SignUp.Password = String.Empty;
        SignUp.Username = String.Empty;
        SignUp.IsLogged = false;
        await Storage.SetAsync("IsLogged", false);
    }
}