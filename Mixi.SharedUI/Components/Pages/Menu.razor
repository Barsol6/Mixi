@using Microsoft.Extensions.Logging
@using Mixi.Api.Modules.Enums
@using Mixi.Shared.Models.Account
@using Mixi.Shared.Models.UI
@using Mixi.SharedUI.Components.Layout
@using Mixi.SharedUI.Components.UI
@using NameGenerator = Mixi.Shared.Models.UI.NameGeneratorPopup
@layout MenuLayout

@page "/menu"

@inject SignUpPopup SignUp
@inject NameGenerator NameGenPop
@inject Account Account
@inject NavigationManager NavigationManager

@implements IDisposable


<div class="container">
        <div class="data-box">
            <div class="logButton">
                <div class="logButton-content" @onclick="() => ShowPopup(MenuChoice.NameGenerator)">
                    NAME GENERATOR
                </div>
            </div>
        </div>  
        <div class="data-box">
            <div class="logButton">
                <div class="logButton-content" @onclick="() => ShowPopup(MenuChoice.PdfViewer)">
                    INTERACTIVE CHARACTER CARD
                </div>
            </div>
        </div>
        <div class="data-box">
            <div class="logButton">
                <div class="closeButton-content" @onclick="LogOut">
                    LOG OUT
                </div>
            </div>
        </div>
    <MenuPopupContainer @ref="_popup"></MenuPopupContainer>
</div>

@code {
    private MenuPopupContainer _popup = null!;

    private ILogger _logger = null!;
    


    protected override void OnInitialized()
    {
        this.SignUp.IsLoggedChange += () => InvokeAsync(StateHasChanged);
    }

    private Task ShowPopup(MenuChoice menuChoice)
    {
        switch (menuChoice)
        {
            case MenuChoice.NameGenerator:
                NavigationManager.NavigateTo("/generators/name_generator");
                break;
            case MenuChoice.PdfViewer:
                NavigationManager.NavigateTo("/pdf/viewer_choice");
                break;
            default:
                (_logger ?? throw new InvalidOperationException()).LogInformation("Menu choice error");
                break; 
        }

        return Task.CompletedTask;
    }
    
    public void Dispose()
    {
        this.SignUp.IsLoggedChange -= StateHasChanged;
    }

    private async Task LogOut()
    {
        NameGenPop.GeneratedName = String.Empty;
        Account.Password = String.Empty;
        Account.Username = String.Empty;
        NavigationManager.NavigateTo("/login");
    }
}