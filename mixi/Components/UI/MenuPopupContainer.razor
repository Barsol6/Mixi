@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using mixi.Modules.UI
@rendermode InteractiveAuto


@inject MenuPopup MenuPopup
@inject ProtectedSessionStorage Storage
@inject SignUpPopup Signup
@implements IDisposable


<div class="@(MenuPopup.IsVisible ? "popup" : "hidden")"  >
    @if (ComponentType is not null)
    {
        <DynamicComponent Type="@ComponentType" Parameters="@Parameters" @ref="_component"/>
    }
    <div>
        <button @onclick="() => HidePopup()">X</button>
    </div>

</div>




@code {

    private  DynamicComponent? _component = null;
    public Type? ComponentType { get; set; }
    public IDictionary<string, object>? Parameters { get; set; }
    
    protected override void OnInitialized()
    {
        this.MenuPopup.IsVisibleChange += () => InvokeAsync(StateHasChanged);
        base.OnInitializedAsync();
    }
    

    
    public async void ShowComponent<T>(IDictionary<string, object>? parameters = null)
    {   
        ComponentType = typeof(T);
        Parameters = parameters;
        MenuPopup.IsVisible = true;
        Signup.IsLogged = true;
        await Storage.SetAsync("MenuIsVisible", MenuPopup.IsVisible);
        await Storage.SetAsync("IsLogged", Signup.IsLogged);
        Console.Out.Write(Signup.IsLogged + " " +MenuPopup.IsVisible);
        
        StateHasChanged();
    }   
    


    public void Dispose()
    {
        this.MenuPopup.IsVisibleChange -= StateHasChanged;
    }

    private void HidePopup()
    {
        MenuPopup.IsVisible = false;
        Storage.SetAsync("MenuIsVisible", MenuPopup.IsVisible);
    }


}