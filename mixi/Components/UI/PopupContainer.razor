@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using mixi.Modules.Account
@using mixi.Modules.UI
@rendermode InteractiveAuto

@inject SignUp SignUp
@inject SignUpPopup SignUpPop
@inject ProtectedSessionStorage Storage

@implements IDisposable


<div class="@(SignUpPop.IsVisible ? "loginPopup" : "hidden")"  >
    @if (ComponentType is not null)
    {
        <DynamicComponent Type="@ComponentType" Parameters="@Parameters" @ref="_component"/>
    }
</div>




@code {

    private  DynamicComponent? _component = null;
    public Type? ComponentType { get; set; }
    public IDictionary<string, object>? Parameters { get; set; }
    
    protected override void OnInitialized()
    {
        this.SignUpPop.IsVisibleChange += () => InvokeAsync(StateHasChanged);
        this.SignUpPop.IsVisibleChange += () =>
        {
            SignUpPop.Password = String.Empty;
            SignUpPop.Username = String.Empty;
            SignUpPop.PasswordRepeat = String.Empty;
        };
        base.OnInitializedAsync();
    }
    

    
    public async void ShowComponent<T>(IDictionary<string, object>? parameters = null)
    {
        ComponentType = typeof(T);
        Parameters = parameters;
        SignUpPop.IsVisible = true; 
        await Storage.SetAsync("SignUpPopupIsVisible", true);  
        StateHasChanged();
    }   
    


    public void Dispose()
    {
        this.SignUpPop.IsVisibleChange -= StateHasChanged;
    }

    private void HidePopup()
    {
        SignUpPop.IsVisible = false;
        Storage.SetAsync("SignUpPopupIsVisible", SignUpPop.IsVisible);
        StateHasChanged();
    }


}