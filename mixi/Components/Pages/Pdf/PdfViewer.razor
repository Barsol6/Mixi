    @using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage    @using mixi.Components.Layout
    @using mixi.Modules.Database
    @using mixi.Modules.Pdf
    @using mixi.Modules.UI

    @inject IPdfRepository PdfRepository
    @inject IJSRuntime JsRuntime
    @inject PdfPopup PdfPopup
    @inject ProtectedSessionStorage Storage

    @rendermode InteractiveServer

    @implements IDisposable
    
    @layout PdfViewerLayout
    <div class="popup">
        <div class="pdfHost">
            @if (_isLoading)
            {
                <p>Loading...</p>
            }
            else if (_document == null)
            {
                <p>Document not found.</p>
            }
            else
            {
                <div id="pdfContainer"></div>
            }
        </div>
        <div >
            <div class="logButton">
                <div class="closePdfButton-content " @onclick="() => ClosePopup()">
                    CLOSE
                </div>
            </div>
        </div>
    </div>




    @code {
        private PdfDocument? _document;
        private bool _isLoading = true;
        private IJSObjectReference? _pdfModule;
        
        protected override void OnInitialized()
        {
            this.PdfPopup.PdfNameChanged += () => InvokeAsync(StateHasChanged);
            this.PdfPopup.IsVisibleChange += () => InvokeAsync(StateHasChanged);
            base.OnInitialized();
        }
        
        protected override async Task OnInitializedAsync()
        {
            try
            {
                _isLoading = true;
                _document = await PdfRepository.GetByIdAsync(PdfPopup.PdfName);
            }
            catch (Exception e)
            {
                Console.Error.WriteLine($"Error: {e.Message}");
            }
            finally
            {
                _isLoading = false;
            }
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (_document != null)
            {
                try
                {
                    _pdfModule = await JsRuntime.InvokeAsync<IJSObjectReference>(
                        "import", $"./js/pdfViewer.mjs?v={DateTime.Now.Ticks}");
                    
                    var pdfContent = await PdfRepository.GetFileContentAsync(PdfPopup.PdfName);
                    Console.WriteLine(PdfPopup.PdfName+"    "+ pdfContent);
                    if (pdfContent != null && _pdfModule != null)
                    {
                        var unlockedPdfContent = PdfHelper.UnlockPdfFormFields(pdfContent);
                        
                        var base64 = Convert.ToBase64String(unlockedPdfContent);
                        
                        await _pdfModule.InvokeVoidAsync("renderPdf", "pdfContainer", base64);
                    }
                }
                catch (Exception e)
                {
                    Console.Error.WriteLine($"Error loading PDF: {e.Message}");
                }
            }
        }
        
    

        public async ValueTask DisposeAsync()
        {
            if (_pdfModule != null)
            {
                await _pdfModule.DisposeAsync();
            }
        }
        
        public void Dispose()
        {
            this.PdfPopup.IsVisibleChange -= StateHasChanged;
            this.PdfPopup.PdfNameChanged -= StateHasChanged;
        }
        
        private async void ClosePopup()
        {
            if (_pdfModule != null)
            {
                await _pdfModule.DisposeAsync();
            }
            PdfPopup.IsVisible = false;
            await Storage.SetAsync("PdfPopupIsVisible", false);
        }
    }