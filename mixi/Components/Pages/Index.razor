@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using mixi.Components.Layout
@using mixi.Modules.Account
@using mixi.Modules.UI

@page "/home"
@page "/"
@rendermode InteractiveServer
@layout MainLayout

@inject MenuPopup MenuPopup
@inject SignUpPopup SignUp
@inject PdfPopup PdfPopup
@inject ProtectedSessionStorage Storage
@inject PasswordHash Password

@implements IDisposable

<LoginPage @ref="_loginPage"> </LoginPage>
<Menu @ref="_menu"> </Menu>
@code {

    LoginPage _loginPage = new LoginPage();
    Menu _menu = new Menu();
    
    protected override void OnInitialized()
    {
        this.SignUp.IsVisibleChange += () => InvokeAsync(StateHasChanged);
        this.SignUp.IsLoggedChange += () => InvokeAsync(StateHasChanged);
        this.MenuPopup.IsVisibleChange += () => InvokeAsync(StateHasChanged);
        this.PdfPopup.IsVisibleChange += () => InvokeAsync(StateHasChanged);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MenuPopup.IsVisible = false;
            SignUp.IsVisible = false;
            SignUp.IsLogged = false;
            PdfPopup.IsVisible = false;
            await Storage.SetAsync("MenuIsVisible", false);
            await  Storage.SetAsync("IsLogged", false);
            await Storage.SetAsync("SignUpPopupIsVisible", false);
            await Storage.SetAsync("PdfPopupIsVisible", false);
            if (Password.LoggedIn is false)
            {
                SignUp.IsLogged = false;
                await  Storage.SetAsync("IsLogged", false);
            }
            StateHasChanged();
        }
        else
        {
            if (Password.LoggedIn is false)
            {
                SignUp.IsLogged = false;
                await  Storage.SetAsync("IsLogged", false);
                StateHasChanged();
            }
            var popupIsVisible = await  Storage.GetAsync<bool>("MenuIsVisible");
            MenuPopup.IsVisible = popupIsVisible.Value; 
            var isLogged = await  Storage.GetAsync<bool>("IsLogged");
            SignUp.IsLogged = isLogged.Value;
            var signUpPopupIsVisible = await  Storage.GetAsync<bool>("SignUpPopupIsVisible");
            SignUp.IsVisible = signUpPopupIsVisible.Value;
            var pdfPopupIsVisible = await Storage.GetAsync<bool>("PdfPopupIsVisible");
            PdfPopup.IsVisible = pdfPopupIsVisible.Value;

        }
  
    }
    
    public void Dispose()
    {
        this.SignUp.IsVisibleChange -= StateHasChanged;
        this.SignUp.IsLoggedChange -= StateHasChanged;
        this.MenuPopup.IsVisibleChange -= StateHasChanged;
        this.PdfPopup.IsVisibleChange -= StateHasChanged;
    }
}