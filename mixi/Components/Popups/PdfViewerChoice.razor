@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using mixi.Modules.Database
@using mixi.Modules.Pdf
@using mixi.Modules.UI
@inject MenuPopup MenuPopup
@inject ProtectedSessionStorage Storage
@inject IPdfRepository PdfRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer

<div class="pdfChoicePanel">
   @if (_isLoading)
   {
       <p>Ładowanie dokumentów...</p>
   }
   else
   {
       <div class="data-box">
           <div class="logButton" @onclick="UploadNewPdf">
               <span class="logButton-content">
                   DODAJ NOWY PDF
               </span>
           </div>
       </div>
       
       @if (documents != null && documents.Any())
       {
           <div>
               <h4>Your character sheets:</h4>
               @foreach (var document in documents)
               {
                   <div class="data-box">
                       <div class="logButton" >
                           <span class="logButton-content" @onclick="() => ViewDocument(document.Id)">
                               @document.Name
                           </span>
                           <span class="logButton-content" @onclick="() => DeletePdf(document.Id)">
                               DELETE
                           </span>
                       </div>
                      
                   </div>
               }
           </div>
       }
       else
       {
           <p>You have no character sheets yet.</p>
       }
   }
  
    <div class="data-box">
        <div class="logButton">
            <div class="closeButton-content " @onclick="ClosePopup">
                CLOSE
            </div>
        </div>
    </div>
</div>


@code {
    private List<PdfDocument> documents;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            documents = await PdfRepository.GetAllAsync();
        }
        catch (Exception e)
        {
            Console.Error.WriteLine($"Error: {e.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ViewDocument(int id)
    {
        NavigationManager.NavigateTo($"/pdfViewer/{id}");
    }

    private void UploadNewPdf()
    {
        NavigationManager.NavigateTo("/uploadPdf");
    }
    
    private async void ClosePopup()
    {
        MenuPopup.IsVisible = false;
        await Storage.SetAsync("MenuIsVisible", false);
    }

    private async void DeletePdf(int id)
    {

        if (!await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this character sheet? This cannot be undone."))
        {
            return;
        }
        _isLoading = true;
        StateHasChanged();

        try
        {
            var success = await PdfRepository.DeleteAsync(id);

            if (success)
            {
                documents = await PdfRepository.GetAllAsync();
            }
            else
            {
                Console.Error.WriteLine($"Failed to delete document with ID: {id}");
            }
        }
        catch (Exception e)
        {
            Console.Error.WriteLine($"Error deleting document: {id}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

}
